@page "/"
@page "/login"
@inject NavigationManager NavigationManager
@using Models
@using DataAccess
@using Microsoft.Extensions.Configuration
@inject ISqlAccess _data
@inject IConfiguration _config
@inject IJSRuntime JS
<div class="all">
    <div class="content">
        <h2>Log in</h2>
        <input type="text" class="content-item" placeholder="Email" @bind="email">
        <input type="password" class="content-item" placeholder="Password" @bind="password">
        <label for="role">Log in as: </label>
        <select name="role" id="role" class="content-item" @bind="userRole">
            <option value="none" selected disabled hidden>
                Select your role
            </option>
            <option value="admin">Admin</option>
            <option value="author">Author</option>
            <option value="reviewer">Reviewer</option>
        </select>
        <button type="button" class="content-item" name="button" onclick="location.href = '/Register'">Create new account</button>
        <button type="button" class="content-item" name="button" @onclick="() => login()">Login</button>
        <a href="/RetrievePassword" class="content-item">Forgot your password?</a>
    </div>
</div>

@code{
    string email, password, userRole;
    private async void login()
    {
        if (userRole == "admin")
        {
            if (email == "admin" && password == "admin")
            {
                NavigationManager.NavigateTo("Admin");
            }
        }

        if (userRole == "author")
        {
            // find user data by email and check password

            // query user data by email
            List<AuthorModel> currAuthors = new List<AuthorModel>();

            string sql = "SELECT AuthorID, Password FROM Author WHERE EmailAddress='" + email + "'";
            currAuthors = await _data.LoadData<AuthorModel, dynamic>(sql, new { }, _config.GetConnectionString("DefaultConnection"));

            if(currAuthors.Count == 0)
            {
                // if no matching user

                await JS.InvokeAsync<string>("alert", "Wrong username or password!");
                return;
            }
            AuthorModel author = currAuthors.FirstOrDefault();
            string p = author.Password;
            int authorID = author.AuthorID;

            // check if password is correct
            if (/*do the check*/password==p)
            {
                // pass authorID as parameter to author page
                NavigationManager.NavigateTo("Author/" + authorID);
            }
        }

        if (userRole == "reviewer")
        {
            // find user data by username and check password
            List<ReviewerModel> reviewers = new List<ReviewerModel>();

            string sql = "SELECT ReviewerID, Password FROM Reviewer WHERE EmailAddress='" + email + "'";
            reviewers = await _data.LoadData<ReviewerModel, dynamic>(sql, new { }, _config.GetConnectionString("DefaultConnection"));

            if (reviewers.Count == 0)
            {
                // if no matching user

                await JS.InvokeAsync<string>("alert", "Wrong username or password!");
                return;
            }
            ReviewerModel reviewer = reviewers.FirstOrDefault();
            string p = reviewer.Password;
            int reviewerID = reviewer.ReviewerID;

            // check if password is correct
            if (/*do the check*/password == p)
            {
                // pass authorID as parameter to author page
                NavigationManager.NavigateTo("Reviewer/" + reviewerID);
            }
        }

    }
}