@page "/MyReviews/{reviewerID}"

@using TestDB.Models
@using DataAccess
@using Microsoft.Extensions.Configuration
@inject ISqlAccess _data
@inject IConfiguration _config

<div class="navbar">
    <button type="button" class="header-button" onclick="location.href='/Reviewer/'+@reviewerID">Home</button>
    <button type="button" class="header-button" onclick="location.href='/UploadReview/'+@reviewerID">Submit New Paper</button>
    <button type="button" class="header-button" onclick="location.href='/MyReviews/'+@reviewerID">My Paper</button>
    <button type="button" class="header-button" onclick="location.href = '/ReviewerAccount/'+@reviewerID">My Account</button>
</div>

<h3>My Reviews</h3>

<table>
    <tr>
        <th>Review ID</th>
        <th>Paper ID</th>
        <th>Appropriateness Of Topic</th>
        <th>Timeliness Of Topic</th>
        <th>Supportive Evidence</th>
        <th>Technical Quality</th>
        <th>Scope Of Coverage</th>
        <th>Citation Of Previous Work</th>
        <th>Originality</th>
        <th>Content Comments</th>
        <th>Organization Of Paper</th>


        <th>Topics</th>
        <th>Edit</th>
    </tr>
    @foreach (var review in reviews)
    {
        <tr>
            <td>@review.ReviewID</td>
            <td>@review.PaperID</td>
            <td>@review.AOT</td>
            <td>@review.ToT</td>
            <td>@review.SE</td>
            <td>@review.TQ</td>

        </tr>
    }
</table>
@code {
    [Parameter]
    public string reviewerID { get; set; }


    private List<Review> reviews = new List<Review>();

    protected override async Task OnInitializedAsync()
    {
        string sql = "SELECT * FROM Review WHERE ReviewerID='" + reviewerID + "'";
        reviews = await _data.LoadData<Review, dynamic>(sql, new { }, _config.GetConnectionString("DefaultConnection"));
    }
}
